// Code generated by "enumer -type=Code -values -transform=snake -trimprefix=Code -json"; DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _CodeName = "not_foundinvalid_paramforbiddeninternal_errorunauthorizedtimeouttoo_many_requestsconflicttoo_large"

var _CodeIndex = [...]uint8{0, 9, 22, 31, 45, 57, 64, 81, 89, 98}

const _CodeLowerName = "not_foundinvalid_paramforbiddeninternal_errorunauthorizedtimeouttoo_many_requestsconflicttoo_large"

func (i Code) String() string {
	if i < 0 || i >= Code(len(_CodeIndex)-1) {
		return fmt.Sprintf("Code(%d)", i)
	}
	return _CodeName[_CodeIndex[i]:_CodeIndex[i+1]]
}

func (Code) Values() []string {
	return CodeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CodeNoOp() {
	var x [1]struct{}
	_ = x[CodeNotFound-(0)]
	_ = x[CodeInvalidParam-(1)]
	_ = x[CodeForbidden-(2)]
	_ = x[CodeInternalError-(3)]
	_ = x[CodeUnauthorized-(4)]
	_ = x[CodeTimeout-(5)]
	_ = x[CodeTooManyRequests-(6)]
	_ = x[CodeConflict-(7)]
	_ = x[CodeTooLarge-(8)]
}

var _CodeValues = []Code{CodeNotFound, CodeInvalidParam, CodeForbidden, CodeInternalError, CodeUnauthorized, CodeTimeout, CodeTooManyRequests, CodeConflict, CodeTooLarge}

var _CodeNameToValueMap = map[string]Code{
	_CodeName[0:9]:        CodeNotFound,
	_CodeLowerName[0:9]:   CodeNotFound,
	_CodeName[9:22]:       CodeInvalidParam,
	_CodeLowerName[9:22]:  CodeInvalidParam,
	_CodeName[22:31]:      CodeForbidden,
	_CodeLowerName[22:31]: CodeForbidden,
	_CodeName[31:45]:      CodeInternalError,
	_CodeLowerName[31:45]: CodeInternalError,
	_CodeName[45:57]:      CodeUnauthorized,
	_CodeLowerName[45:57]: CodeUnauthorized,
	_CodeName[57:64]:      CodeTimeout,
	_CodeLowerName[57:64]: CodeTimeout,
	_CodeName[64:81]:      CodeTooManyRequests,
	_CodeLowerName[64:81]: CodeTooManyRequests,
	_CodeName[81:89]:      CodeConflict,
	_CodeLowerName[81:89]: CodeConflict,
	_CodeName[89:98]:      CodeTooLarge,
	_CodeLowerName[89:98]: CodeTooLarge,
}

var _CodeNames = []string{
	_CodeName[0:9],
	_CodeName[9:22],
	_CodeName[22:31],
	_CodeName[31:45],
	_CodeName[45:57],
	_CodeName[57:64],
	_CodeName[64:81],
	_CodeName[81:89],
	_CodeName[89:98],
}

// CodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CodeString(s string) (Code, error) {
	if val, ok := _CodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Code values", s)
}

// CodeValues returns all values of the enum
func CodeValues() []Code {
	return _CodeValues
}

// CodeStrings returns a slice of all String values of the enum
func CodeStrings() []string {
	strs := make([]string, len(_CodeNames))
	copy(strs, _CodeNames)
	return strs
}

// IsACode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Code) IsACode() bool {
	for _, v := range _CodeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Code
func (i Code) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Code
func (i *Code) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Code should be a string, got %s", data)
	}

	var err error
	*i, err = CodeString(s)
	return err
}
